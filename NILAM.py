# Obfuscated with PyObfuscate
# https://www.github.com/NILAM-RAI
# Time : Mon Sep  2 10:59:35 2024
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'==gCpgibpFWbgACIgACIKozJf9lbpFWbf91Jg0TPg81Xl1WYu91XgYWaKoQKoUGbpZ2Xt9mcm91cldWYzNXZt9FZuV2cgACIgACIKA3bvxGIn5Wak5WZzBSZnF2czVWbgUGa0BCa0l2dgUWdulGdu92YgwiblhGVgMCIgACIgAiCKowcuV2avRHIsxWYgcmbpNXdgQUSgQWZpZWajVGczBSZoRHIvRHIldWYzNXZtBCbhlGdp5WagUGa0BCZuV2UgMCIgACIgAiCKkCK0JXY0NnLkFWZyhGdfJXZ2JXZzBCIgACIgoQKyVmdyV2cfVGd1NWZ4VWP0V2ZyFGdoQWYlJHaU5yZulGZhVmcoRHI9ACZhVmcoR3XyVmdyV2cgACIgACIKoTKo4Wah1GImVGZKoQKpUGK0FWby9mZuISf7BiOkVmcyV3Yj9GIy9mcyVGIuFEIdFyWigCdulmcwBCIgACIgACIgACIgACIKoTZgMXYg42bpRHclNGeFBCdwV2Y4VGIgACIgACIgACIKkiIuxlLu4yczV2YvJHcgUGa0ByZulGdyFGdzVmUg4CduV2cgMXZnF2czVWbgwGbBBSXrslbcJCK05WayBHIgACIgACIgACIgACIgogCpQWZlB3coAXZlx2cuUWbpRHIgACIgACIgACIgACIgACIgAiCpgyczVmbpxGIgACIgACIgACIgACIgACIgACIgACIKkCKzNXZulGbgACIgACIgACIgACIgACIgACIgACIgoQKpU2ZhN3cl1GIrAyJgcCIrASZtFmbfNnclRXYoBCLxAyKggXZk5Waf5WZr9GdgwCZp91b252bjBCLxAyKggXZk5WafV2ZhN3cl1GIgACIgACIgACIgACIgACIgACIgACIgACIgoAK0FWby9mZuISf7BiO9tHIuV2avRFIoRXa3BSf7Byb252bDBiZvBSf7BSZnF2czVWTgQmblNHIvRHIkVGbpFmRg0Feb1WNzsTMbNzMwwlIoQnbpJHcgACIgACIgACIgACIgACIgACIgACIgogOlNHblBCIgACIgACIgACIgACIgACIgoQKoM3cl5WasBCIgACIgACIgACIgACIgACIgACIgAiCpgyczVmbpxGIgACIgACIgACIgACIgACIgACIgACIKkSKldWYzNXZtByKgcCInAyKgUWbh52XzJXZ0FGagwSMgsCI4VGZul2XuV2avRHIsQWaf9mdu92YgwSMgsCI4VGZul2XldWYzNXZtBCIgACIgACIgACIgACIgACIgACIgACIgACIKgCdh1mcvZmLi03egoTf7Biblt2bUBSf7Byb252bDBiZvBSf7BSZnF2czFWTgcmbp5mb1JFIdNJnivVb2MzOxs1MzADXigCdulmcwBCIgACIgACIgACIgACIgACIgACIgAiC6s2buU2cu9GczVmcgYWagACIgACIgACIgACIgACIgACIKkiIwVCITViONViOJVCIkVSLtVSLZVCI+0TPgQHclN2YB1mM5sTMbNzMwwlIoUWbpRnZyR3cuUWbpRHI9ASZtlGdfRnblJnc1NGIgACIgACIgACIgACIgACIgAiCKkycyVGZhVGa9MnclRWYlhGIsMnclRXZtFmchBXPu92cqBCLsJXdoQ3cvBnLzR3clVXclJHI9ASZz52bwNXZyBCIgACIgACIgACIgACIgACIgoQfldWYzNXZtByKgcCInAyKgUWbh52XzJXZ0FGagozJldWYzNXZtdCIs4WZr9GdfN3clN2YhBiOn4WZr9GdfN3clN2Yhdyeg0DIzJXZ0VWbhJXYwBCIgACIgACIgACIgACIgACIgoQKkl2XvZnbvNGIrAyJfR3JoQXYtJ3bm5iIv03evAjL3Ejdv02bj5yav9mYlNWYm5CawFmcn9yL6MHc0RHaiASPgwmc1BCIgACIgACIgACIgACIgACIgogCpgCcpJHdz5SX4VGZul2XldWYzNXZtt1cldWYzNXZtBSPgU2ZhN3cl1GIgACIgACIgACIgACIgACIgAiCKkCKwlmc0NnLdhXZk5Waf5WZr9GdbNnblt2b0BSPg4WZr9GdfN3clN2YhBCIgACIgACIgACIgACIgACIgowcuV2avR3X4FWbgUCI4VGZul2XldWYzNXZtBSPggXZk5Waf5WZr9GdgACIgACIgACIgACIgACIgACIKoTKzV2ZhN3cl12XtVnboU2ZuFmcg4WaggXZk5WafV2ZhN3cl1GIy9mZgACIgACIgACIgACIgAiC6knc0BCIgACIgACIgAiC6UWdyRFIlxWaodHIgACIgAiCK0HIgACIgAiCn02bj5SZsd2bvdmL3d3dnAiOnIXZyVmZlJ3JgACIgACIgACIgoALngjLw0Tc7InZskjLw0Tc74WZsMVVt4WZnAiOnU2ZhV3ZuFGTtQHclN2YBdCIgACIgACIgACIKwyJlRXYsZWZkBCLwlmendCI6cyZulGZvNmbF1CdwV2YjF0JgACIgACIgACIgoALngjLw0Tc7oyLqwyZuBXYvU2Zh1WasAnYld3LldWYtlGL54CM9E3Os1Gev42bpRXYjlGbwBXYswWb4tCbtRHa49ibvlGdhNWasBHchxCbtRHavQHelR3JgozJ0BXZjNWQnACIgACIgACIgAiCsciNz4yNzUzLpJXYmF2UgUGbpJ2bNBSNyEjL5IDMz4CMugTNvUWbvJHaDBSKvt2YldEIltWasBCLM1EVItEKgYzMuczM18CdptkYldVZsBHcBBSK2dHI7cTMw4yMyYDM3EjL2IFUP9CZslWdCBSOTBSe4FGbhdEIn5Wdz1WYTByOw4CMugDIkl2byRmbBByO4VnbpxEKgAjL18SYsxWa69WTnAiOnQnbldWQtIXZzV1JgACIgACIgACIgoALnEzJgozJzR3clVXclJVLlJXdjV2culULlRWYydGcVdCIgACIgACIgACIKwyJw0TZnFWL4FWbnAiOnw2byRnbvNULlh2YhN0JgACIgACIgACIgoALnUmdpxWYtAXZlt2JgozJu9Wa0NWZu52bDdCIgACIgACIgACIKsHI9AycyVGZhVGagACIgACIKoQKn84liDZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZlinUQS1STBxUSOBZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZliDZli/4lifCIrAyJtJTO7EzWzMDMcdCK05WayBHIgACIgACIgACIKoTKoM3cl5WasBiZlRGIgACIgAiCKkSKoAXayR3cukCKkFWZy5SZslmZoQnbpBSPgQWZlB3cgACIgACIgACIgogOlxWamBychBSKnI3JgwyJ0hHduQURFB1UtIlTngiblB3bggGdpdHIgACIgAiCKkCKwlmc0NnLpgCZhVmcuUGbpZGI9ASZtFmbfNnclRXYoBCIgACIgACIgAiC6UGbpZGIzFGIpcicnACLnQHe05SRNFkTTJVRUFEStIlTngiblB3bggGdpdHIgACIgAiCKkycldWYzNXZt9Vb15GIsMnblt2b09Vb15GKulWbg0DIz5WZr9GdfhXYtBCIgACIgoQKz5WZr9Gdo4WZsBSPgMnblt2b09Vb15GIgACIgAiCpgycl5WasRWYlJnLlxWamBSPgMnblt2b0BCIgACIgACIgAiC6UGbpZGIzFGIpcicnACLnQHe05iTFt0TU1iUOdCKuVGcvBCa0l2dgACIgACIKoQKzV2ZhN3cl1GKuVGbg0DIzV2ZhN3cl12XtVnbgACIgACIKoQKoMXZulGbkFWZy5SZslmZg0DIzV2ZhN3cl1GIgACIgACIgACIKoTZslmZgMXYgkyJydCIscCd4RnLFxUSG1iUOdCKuVGcvBCa0l2dgACIgACIKoQKoAXayR3cukCKkFWZy5SZslmZg0DIkl2XvZnbvNGIgACIgACIgACIKoTZslmZgMXYgkyJydCIscCd4RnLPZlTPNULS50Jo4WZw9GIoRXa3BCIgACIgogOpgSZslmZf12byZ2XzV2ZhN3cl12Xk5WZzBiZlRmCpgSZnF2czVWbfxWYpRXaul2Xk5WZzpQKi4GXu4iLw92bsByZulGZuV2cgU2ZhN3cl1GIlhGdgcmbpRnchR3Ug4CduV2cgMXZnF2czVWbgwWYpRXaulEIdtyWuxlIoQnbpJHcjACIgACIgogCldWYzNXZtBCbhlGdp5Wagg2YhVGIn5Wak5WZzBiblV2d0VmYgQmbvNWZzBSMgI3bmBCdpF2VgMCIgkSMuADKwVWZsNnLl1Wa0BCIgACIgACIgAiCpICclAyUloTTloTSlACZl0Sbl0SWlICKl1Wa0Zmc0NnLl1Wa0BSPgUWbpR3X05WZyJXdjBCIgACIgACIgAiCkVGdzVWdxVmcgMXYgwSZyVGagQnbpJHcg8GdgQWZl5GIv5EIjACIgACIgACIgAiCKkycyVGZhVGa9MnclRWYlhGIsMnclRXZtFmchBXPu92cqBCLsJXdoQ3cvBnLzR3clVXclJHI9ASZz52bwNXZyBCIgACIgACIgAiC9d2ctBiOnU2ZhN3cl12Jgwiblt2b091czV2YjFGI6ciblt2b091czV2YjF2J7BSPgMnclRXZtFmchBHIgACIgACIgACIKkiblt2b091czV2YjFGK0FWby9mZuUGdhxGctVGdfd2ctBSPgc2ctBCIgACIgACIgAiCpQWafRXZnJXY0ByKgcyX0dCK0FWby9mZuIyL9t3Lw4yNxY3Lt92Yus2bvJWZjFmZugGchJ3Zv8iOzBHd0hmIg0DIsJXdgACIgACIgACIgoQKoAXayR3cu4WZr9Gdg0DIuV2avR3XzNXZjNWYgACIgACIgACIgogOz5WZr9Gdg4Wag4WZr9GdgI3bmBCIgACIgogC9BCIgACIgowJt92YuUGbn92bn5yd3d3JgozJyVmclZWZydCIgACIgACIgACIKwyJ44CM9E3OyZGL54CM9E3OuVGLTVVLuV2JgozJldWY1dmbhxUL0BXZjNWQnACIgACIgACIgAiCscSZ0FGbmVGZgwCcpp3ZnAiOncmbpR2bj5WRtQHclN2YBdCIgACIgACIgACIKwyJ44CM9E3Oq8iKscmbwF2LldWYtlGLwJWZ39SZnFWbpxSOuATPxtDbth3Lu9Wa0F2YpxGcwFGLs1GerwWb0hGev42bpRXYjlGbwBXYswWb0h2L0hXZ0dCI6cCdwV2YjF0JgACIgACIgACIgoALnYzMuczM18SayFmZhNFIlxWai9WTgUjMx4SOyAzMuAjL4UzLl12byh2QgkybrNWZHBSZrlGbgwCTNRFSLhCI2MjL3MTNvQXaLJWZXVGbwBXQgkid3ByO3EDMuMjM2AzNx4iNSB1TvQGbpVnQgkzUgkHehxWYHByZuV3ctF2UgsDMuAjL4ACZp9mck5WQgsDe15WaMhCIw4SNvEGbslmev10JgozJ05WZnFULyV2cVdCIgACIgACIgACIKwyJxcCI6cyc0NXZ1FXZS1SZyV3YlNnbJ1SZkFmcnBXVnACIgACIgACIgAiCscCM9U2Zh1Ceh12JgozJs9mc052bD1SZoNWYDdCIgACIgACIgACIKwyJlZXasFWLwVWZrdCI6cibvlGdjVmbu92QnACIgACIgACIgAiC7BSPgMnclRWYlhGIgACIgAiCKkyJPep4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4JFkUt0UQMlkTQWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4QWp4Pep4nAyKgcSbykzOxs1MzADXngCdulmcwBCIgACIgACIgAiC6kCKzNXZulGbgYWZkBCIgACIgogCpgycn5WauJXY39VZsJWYzlGZuMjYpxGbyVnLzV2Zht2YhBnLzR3clVXclJHIgACIgAiCKICO0UTM2AzMxUTN2UTM2ICI9ACZp9FdldmchRHIgACIgAiCldWYzNXZtBSZoRHIk5WZzByb0BCduF2dgU3b5BSZyVGa3BCRJBSZoRHI5ZWajVGcTByIgACIgACIKogI9tHItoDIzlEIuV2avRFI51EIuIXZ2JXZTBic19WWgcmbpNXVg0WQgkEIpFmUg0WYslmTg8GbsVGSgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgkUQSBSTBxUSOBiP9AiUF50VPBCIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgACIgASSBJFINFETJ5EIZJEITt0QJJFVg0iOgQVSEVkUDJCI9ASZ0FGbw1WZ091Zz1GIgACIgAiC05WZtVmcpVXclJHIyV3b5BiclBHIzFGIldWYzNXZtBSZoRHI5ZWak9WTgMCIgACIgAiCKkCKzVmbpxGZhVmcuUGbpZGI9AycuV2avRHIgACIgACIgACIKoTZslmZgMXYgkyJydCIscCd4RnLOV0SPRVLS50Jo4WZw9GIoRXa3BCIgACIgogOpgSZnF2czVWbfxWYpRXaul2Xk5WZzBiZlRmCKoQKoIXZ2VmcvZ2XlZnclNnLkBHd0hGIgACIgACIgACIKkSKUJ1TQhCdh1mcvZmLi03e6Q3cvhGbhN2bs9yL6AHd0hGI0FGIn5Wau5WdyBiclZnclNlIoQnbpJHcgACIgACIgACIgogOkBHd0hGIzFGIpIXZsRmbhhUeNBCLpQlUPBFIsIiIogiclZnclNFUDRlLyVmdyV2c0V2aj92cggGdpdHIgACIgAiCwADM0ASPgQlUPBFIgACIgAiC6kCKyVmdyV2cfVGd1NWZ4VGImVGZKkiIJFkUg0UQMlkTgklQgUERB1EItoDIUlERFJ1QiIGKlRXaydnLlxWamdnLmxWZzBCIgACIgACIgAiCpgycyVGZhVGafRmbl5iZsV2cgACIgACIgACIgoQKn4WahxGcvQHelR3JgwyJlBXe01CduVGdu92QngiclRWYlh2Xk5WZz5iZsV2cgACIgACIgACIgoQKwAjMoU2cu9GczVmcfRmblNnLmxWZzBCIgACIgACIgAiC6kiZsV2coQVRH91bkBiZlRGIgACIgAiC6kiclxGZuFGS0NXZ1FXZSBFVUhUZsBXbpNlLyVmdyV2cuAHd0hGKyVGbk5WYIlXTgM3chx2YK02bk5WYyBCdy9GctlmCn5WakFWZyhGdgQncvBXbppgclZnclNHdlt2YvNHI0J3bw1WaKIXZ2JXZz5Cc0RHagQncvBXbppwczV2YvJHciV3cgQncvBXbppwcvBCdy9GctlmCtVGdzl3cgQncvBXbpBSby9mZ0FGbwBSbvJnZKMXezBCdy9GctlmCl1Wa0BCdy9GctlmCu92cqBCdy9GctlmCzR3clVXclJHI0J3bw1Wa'))
